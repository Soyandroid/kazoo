syntax = "proto2";

package v403db;

message RequestHeader {
    required string netid = 1;
    required uint32 cver = 2;
    required string aver = 3;
    required uint32 sid = 4;
    required uint32 retry = 5;
    required bool is_terminal = 6;
    required uint32 protover = 7;
    optional bool is_main_terminal = 8;
}

message ResponseHeader {
    required bool success = 1;
    optional uint32 errcode = 2 [default = 0];
    required uint32 protover = 3;
}

message TeamInfo {
    required uint32 sf = 1;
    required uint32 shop_id = 2;
    required uint32 team_id = 3;
    optional string country_code = 4;
    optional string battalion_name = 5;
    optional uint32 area_id = 6;
    optional uint32 region_id1 = 7;
    optional uint32 region_id2 = 8;
    optional string team_name = 9;
    optional uint32 layer0 = 10;
    optional uint32 layer1 = 11;
    optional uint32 layer2 = 12;
    optional uint32 leader = 13;
    optional uint32 subleader = 14;

    repeated TeamMember members = 15;
    message TeamMember {
        required uint32 pilot_id = 1;
        required string name = 2;
        required string title = 3;
        required uint32 level = 4;
        required uint32 kill_count = 5;
        required uint32 last_use_ms = 7;
        required uint32 total_play = 8;
        required uint32 enlistment_date = 9;
        required uint32 total_pp = 10;
    }
}

message BAIDLookupRequest {
    required uint32 device_type = 1;
    required string access_code = 2;
    required string chip_id = 3;
    required string game_id = 4;
    required string board_serial = 5;
    required string shop_id = 6;
    required string country_code = 7;
}

message FaceCameraData {
    required uint32 gender = 1;
    required uint32 age = 2;
    required uint32 accuracy = 3;
}

message PilotBasicInfo {
    required uint32 sf = 1;
    required uint32 shop_id = 2;
    required uint32 team_id = 3;
    required uint32 team_id_old = 4;
    required string name = 5;
    required uint32 name_change_status = 6;
    required uint32 name_change_accept = 7;
    optional string name_change_string = 8;
    required string title = 9;
    required uint32 sound_volume = 10;
    required uint32 image = 11;
    required uint32 voice = 12;

    required AchievementInfo achievement = 13;
    message AchievementInfo {
        required uint64 flag0 = 1;
        required uint64 flag1 = 2;
        required uint64 flag2 = 3;
    }

    required uint32 traning_mode_count = 14;
    required uint32 pilot_point = 15;
    required uint32 pilot_point_unadd = 16;
    required uint32 pilot_point_total = 17;
    required uint32 battle_count_unadd = 18;
    required uint32 win_count_unadd = 19;
    required uint32 lose_count_unadd = 20;
    required uint32 kill_count_unadd = 21;
    required uint32 total_play_count = 22;
    required uint32 total_kill_count = 23;
    required uint64 sequence_flag = 24;
    required uint32 advice_flag = 25;
    required uint32 last_look_team_info = 26;
    optional uint64 private_matching_id = 27;
    required uint32 cockpit_type_real = 28;
    repeated uint64 cockpit_setting = 29;
    repeated uint64 cockpit_part = 30;
    repeated uint32 cockpit_next = 31;
    repeated uint32 cockpit_unadd = 32;

    repeated ChallengeModeHighScore challenge_mode_score = 33;
    message ChallengeModeHighScore {
        required uint32 ms = 1;
        required uint32 score = 2;
        optional uint32 reserve = 3;
    }

    required LotteryInfo lottery_info = 34;
    message LotteryInfo {
        required uint32 revision = 1;
        required uint32 phase = 2;
        required bool enable = 3;
        required bool election = 4;
        required uint32 count = 5;
        optional uint32 reserve = 6;
    }

    required uint32 campaign_info = 35;
    required uint64 campaign_data = 36;
    repeated uint64 extention = 37;
    repeated uint64 title_flags = 38;
    optional uint32 win_continuing = 39;

    optional TitleCampaign title_campaign_info = 40;
    message TitleCampaign {
        required uint32 event_id = 1;
        required uint32 event_title_id = 2;
        required uint32 event_stamp_max = 3;
        required uint32 saved_id = 4;
        required uint32 stamp_now = 5;
        required uint32 stamp_add = 6;
        required uint32 acquisition_title_id = 7;
    }

    optional string sortie_id = 41;

    optional EXMSCampaign exms_campaign_info = 42;
    message EXMSCampaign {
        required uint32 campaign_id = 1;
        required string start_date = 2;
        required uint32 period = 3;
        required uint32 saved_id = 4;
        required bool selected = 5;
        required uint32 msid = 6;
        required uint32 exms_index = 7;
        required uint32 point_now = 8;
        required uint32 point_add = 9;
    }

    repeated uint64 medal_acquisition_flags = 43;
    repeated uint64 medal_possession_flags = 44;

    optional TBMSCampaign tbms_campaign_info = 45;
    message TBMSCampaign {
        required uint32 saved_id = 1;
        required uint32 point_now = 2;
        required uint32 point_add_base = 3;
        required uint32 point_add_win = 4;
        required uint32 point_add_login = 5;
    }

    optional CampaignProgress campaign_progress_info = 46;
    message CampaignProgress {
        required uint32 saved_id = 1;
        required uint64 flags = 2;
        optional uint32 ticket_num = 3;
    }
}

message PilotMsInfo {
    required uint32 prev_ms = 1;
    repeated uint32 prev_ms_by_category = 2;
    required uint32 develop_ms = 3;
    required uint32 develop_bs = 4;

    repeated MSData data = 5;
    message MSData {
        required uint32 customize_point = 1;
        required uint32 ms_level = 2;
        required uint32 grow_ms_level = 3;
        required uint32 tuning = 4;
        required uint32 prev_main_weapon = 5;
        required uint32 prev_sub_weapon = 6;
        required uint32 prev_fight_weapon = 7;
        required uint32 prev_setting = 8;
        required uint32 extra_level = 9;
        required uint32 extra_point = 10;
        optional uint32 use_count = 11;
        optional uint32 reserve = 12;
        optional uint32 remining_rental_days = 13;
        optional bool has_rental_weapon = 14;
    }

    optional RentalMSInfo deprecated_rental_ms = 6;
    message RentalMSInfo {
        required uint32 msid = 1;
        required uint32 expire = 2;
    }

    optional RentalMSInfo deprecated_event_rental_ms = 7;
    required uint64 ms_extra_data = 8;
    optional string rental_check_date = 9;
    optional bool need_notify_rental_state = 10;
}

message PilotLevelInfo {
    required uint32 level = 1;
    required uint32 next_level = 2;
    required uint32 matching_class = 3;
    required uint32 pilot_level = 4;
    required bool elite_flag = 5;

    required LevelJudgeInfo level_judge_info = 6;
    message LevelJudgeInfo {
        required uint32 count = 1;
        required uint64 rank_hist = 2;
        required uint64 winlose_hist = 3;
    }

    required LevelJudgeInfo pilot_level_judge_info = 7;
    required uint32 examination_status = 8;
    optional uint32 max_level = 9;
    optional uint32 max_pilot_level = 10;
    optional int32 level_point = 11;
    optional uint32 next_pilot_level = 12;
    optional uint32 level_judge_week_id = 13;
}

message PilotMobileInfo {
    required uint32 request_team_proc = 1;
    required uint32 request_date = 2;
    required uint32 request_shop_id = 3;
    required uint32 request_team_id = 4;
    required string new_team_name = 5;
    required uint32 new_team_mark_layer0 = 6;
    required uint32 new_team_mark_layer1 = 7;
    required uint32 new_team_mark_layer2 = 8;
    required uint32 custom_image = 9;
    required uint32 custom_voice = 10;
    required uint32 custom_expire = 11;
    repeated uint32 symbol_chat = 12;
    repeated uint32 extention32 = 13;
    repeated uint64 extention64 = 14;

    optional AvatarSetting avatar = 15;
    message AvatarSetting {
        required uint32 gender = 1;
        required uint32 voice = 2;
        required uint32 greeting = 3;
        repeated uint32 items = 4;
    }

    repeated RewardRentalMs reward_rental_ms = 16;
    message RewardRentalMs {
        required uint32 msid = 1;
    }
}

message PilotOnlineInfo {
    required uint64 last_play_date = 1;
    required uint32 last_play_shop = 2;
    required bool blacklist_flag = 3;
    required uint32 team_change_date = 4;
    repeated uint32 control_flag = 5;
    repeated uint32 ranking_rankin_count = 6;
    optional uint32 rev1_win = 8;
    repeated uint32 rev2_category_s = 9;
    repeated uint32 rev2_category_win = 10;
    repeated uint32 rev2_win = 11;
    repeated uint32 rev3_category_s = 12;
    repeated uint32 rev3_category_win = 13;
    repeated uint32 rev3_win = 14;
    repeated uint32 win_of_map = 15;
    repeated uint32 win_of_rule = 16;
    optional uint32 win_of_mino = 17;
    optional uint32 kizuna_level1 = 18;
    optional uint32 kizuna_level2 = 19;
    optional uint32 recovery_count = 20;
    optional uint32 saving_count = 21;
    optional uint32 triple_attack = 22;
    optional uint32 quick_draw = 23;
    optional uint32 anti_fire = 24;
    optional uint32 anti_grapple = 25;
    optional uint32 anti_tackle = 26;
    optional uint32 assist_count = 27;
    optional uint32 kill_base_count = 28;
    optional uint32 play_count = 29;
    optional uint32 kill_count = 30;
    optional uint32 rigid_land = 31;
    optional uint32 quick_strike = 32;
    optional uint32 cd_count = 33;
    optional uint32 anti_tank = 34;
    optional uint32 fire_sever = 35;
    optional uint32 fire_prediction = 36;
    optional uint32 nolock_tank = 37;
    optional uint32 sever_loop = 38;
    optional uint32 tackle_draw = 39;
    optional uint32 double_sever = 40;
    optional uint32 jump_sniping = 41;
    optional uint32 escape_attack = 42;
    repeated uint32 extention32 = 43;
    repeated uint64 extention64 = 44;
    optional uint32 event_rate_top_count = 45;
    optional uint32 event_rate_top100_count = 46;
    optional uint32 team_burst_count = 47;
    repeated uint32 grant_title_id = 48;
}

message PilotRankingInfo {
    repeated RankingInfo ranking_info = 1;
    message RankingInfo {
        required uint32 ranking_week = 1;
        required uint32 ranking_rank = 2;
        required uint32 ranking_reward = 3;
        repeated int32 ranking_pts = 4;
        repeated int32 ranking_prev_pts = 5;
        repeated uint32 ranking_win = 6;
        repeated uint32 ranking_play = 7;
    }

    required uint32 ranking_win = 2;
    required bool ranking_first_today = 3;
}

message PilotEventInfo {
    required int32 event_id = 1;
    optional int32 event_point = 2;
    optional uint32 event_play = 3;
    optional uint32 event_win = 4;
    optional uint32 play_flag = 5;
    optional uint32 win_flag = 6;
    optional bool lottery_election = 7;
    optional uint32 lottery_count = 8;
    optional uint32 reward_accept = 9;
    optional uint32 event_rate = 10;
    optional uint32 event_rate_rank = 11;
}

message PilotInfo {
    required uint32 id = 1;
    required uint32 client_ver = 2;
    required uint32 history_flag = 3;
    required PilotBasicInfo basic_info = 4;
    required PilotMsInfo ms_info = 5;
    required PilotLevelInfo level_info = 6;
    optional TeamInfo teaminfo = 7;
    optional PilotMobileInfo mobile_info = 8;
    optional PilotOnlineInfo online_info = 9;
    optional PilotRankingInfo ranking_info = 10;
    optional PilotEventInfo event_info = 11;

    extensions 20000 to max;
}

message RecruitInfo {
    required uint32 id = 1;
    required uint32 count = 2;
    required uint32 flag = 3;
}

message ExternalService {
    required uint32 id = 1;
    required uint64 expire = 2;
    required string access_token = 3;
}

enum ProtocolVersions {
    PROTOCOL_VERSION = 20110702;
}
